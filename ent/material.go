// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"pandora/ent/material"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Material is the model entity for the Material schema.
type Material struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// Describe holds the value of the "describe" field.
	Describe string `json:"describe,omitempty"`
	// Price holds the value of the "price" field.
	Price float64 `json:"price,omitempty"`
	// BuyDate holds the value of the "buyDate" field.
	BuyDate time.Time `json:"buyDate,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Material) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case material.FieldPrice:
			values[i] = new(sql.NullFloat64)
		case material.FieldID:
			values[i] = new(sql.NullInt64)
		case material.FieldName, material.FieldCode, material.FieldDescribe:
			values[i] = new(sql.NullString)
		case material.FieldBuyDate:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Material", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Material fields.
func (m *Material) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case material.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = int(value.Int64)
		case material.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				m.Name = value.String
			}
		case material.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				m.Code = value.String
			}
		case material.FieldDescribe:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field describe", values[i])
			} else if value.Valid {
				m.Describe = value.String
			}
		case material.FieldPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				m.Price = value.Float64
			}
		case material.FieldBuyDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field buyDate", values[i])
			} else if value.Valid {
				m.BuyDate = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Material.
// Note that you need to call Material.Unwrap() before calling this method if this Material
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Material) Update() *MaterialUpdateOne {
	return (&MaterialClient{config: m.config}).UpdateOne(m)
}

// Unwrap unwraps the Material entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Material) Unwrap() *Material {
	tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Material is not a transactional entity")
	}
	m.config.driver = tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Material) String() string {
	var builder strings.Builder
	builder.WriteString("Material(")
	builder.WriteString(fmt.Sprintf("id=%v", m.ID))
	builder.WriteString(", name=")
	builder.WriteString(m.Name)
	builder.WriteString(", code=")
	builder.WriteString(m.Code)
	builder.WriteString(", describe=")
	builder.WriteString(m.Describe)
	builder.WriteString(", price=")
	builder.WriteString(fmt.Sprintf("%v", m.Price))
	builder.WriteString(", buyDate=")
	builder.WriteString(m.BuyDate.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Materials is a parsable slice of Material.
type Materials []*Material

func (m Materials) config(cfg config) {
	for _i := range m {
		m[_i].config = cfg
	}
}
