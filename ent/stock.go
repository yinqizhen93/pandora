// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"pandora/ent/stock"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Stock is the model entity for the Stock schema.
type Stock struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Market holds the value of the "market" field.
	Market string `json:"market,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Date holds the value of the "date" field.
	Date time.Time `json:"date,omitempty"`
	// Open holds the value of the "open" field.
	Open float32 `json:"open,omitempty"`
	// Close holds the value of the "close" field.
	Close float32 `json:"close,omitempty"`
	// High holds the value of the "high" field.
	High float32 `json:"high,omitempty"`
	// Low holds the value of the "low" field.
	Low float32 `json:"low,omitempty"`
	// Volume holds the value of the "volume" field.
	Volume int32 `json:"volume,omitempty"`
	// OutstandingShare holds the value of the "outstandingShare" field.
	OutstandingShare int32 `json:"outstandingShare,omitempty"`
	// Turnover holds the value of the "turnover" field.
	Turnover float32 `json:"turnover,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Stock) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case stock.FieldOpen, stock.FieldClose, stock.FieldHigh, stock.FieldLow, stock.FieldTurnover:
			values[i] = new(sql.NullFloat64)
		case stock.FieldID, stock.FieldVolume, stock.FieldOutstandingShare:
			values[i] = new(sql.NullInt64)
		case stock.FieldMarket, stock.FieldCode, stock.FieldName:
			values[i] = new(sql.NullString)
		case stock.FieldDate:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Stock", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Stock fields.
func (s *Stock) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case stock.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case stock.FieldMarket:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field market", values[i])
			} else if value.Valid {
				s.Market = value.String
			}
		case stock.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				s.Code = value.String
			}
		case stock.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				s.Name = value.String
			}
		case stock.FieldDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				s.Date = value.Time
			}
		case stock.FieldOpen:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field open", values[i])
			} else if value.Valid {
				s.Open = float32(value.Float64)
			}
		case stock.FieldClose:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field close", values[i])
			} else if value.Valid {
				s.Close = float32(value.Float64)
			}
		case stock.FieldHigh:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field high", values[i])
			} else if value.Valid {
				s.High = float32(value.Float64)
			}
		case stock.FieldLow:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field low", values[i])
			} else if value.Valid {
				s.Low = float32(value.Float64)
			}
		case stock.FieldVolume:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field volume", values[i])
			} else if value.Valid {
				s.Volume = int32(value.Int64)
			}
		case stock.FieldOutstandingShare:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field outstandingShare", values[i])
			} else if value.Valid {
				s.OutstandingShare = int32(value.Int64)
			}
		case stock.FieldTurnover:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field turnover", values[i])
			} else if value.Valid {
				s.Turnover = float32(value.Float64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Stock.
// Note that you need to call Stock.Unwrap() before calling this method if this Stock
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Stock) Update() *StockUpdateOne {
	return (&StockClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the Stock entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Stock) Unwrap() *Stock {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Stock is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Stock) String() string {
	var builder strings.Builder
	builder.WriteString("Stock(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteString(", market=")
	builder.WriteString(s.Market)
	builder.WriteString(", code=")
	builder.WriteString(s.Code)
	builder.WriteString(", name=")
	builder.WriteString(s.Name)
	builder.WriteString(", date=")
	builder.WriteString(s.Date.Format(time.ANSIC))
	builder.WriteString(", open=")
	builder.WriteString(fmt.Sprintf("%v", s.Open))
	builder.WriteString(", close=")
	builder.WriteString(fmt.Sprintf("%v", s.Close))
	builder.WriteString(", high=")
	builder.WriteString(fmt.Sprintf("%v", s.High))
	builder.WriteString(", low=")
	builder.WriteString(fmt.Sprintf("%v", s.Low))
	builder.WriteString(", volume=")
	builder.WriteString(fmt.Sprintf("%v", s.Volume))
	builder.WriteString(", outstandingShare=")
	builder.WriteString(fmt.Sprintf("%v", s.OutstandingShare))
	builder.WriteString(", turnover=")
	builder.WriteString(fmt.Sprintf("%v", s.Turnover))
	builder.WriteByte(')')
	return builder.String()
}

// Stocks is a parsable slice of Stock.
type Stocks []*Stock

func (s Stocks) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
