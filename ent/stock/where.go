// Code generated by entc, DO NOT EDIT.

package stock

import (
	"pandora/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Market applies equality check predicate on the "market" field. It's identical to MarketEQ.
func Market(v string) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMarket), v))
	})
}

// Code applies equality check predicate on the "code" field. It's identical to CodeEQ.
func Code(v string) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCode), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Date applies equality check predicate on the "date" field. It's identical to DateEQ.
func Date(v time.Time) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDate), v))
	})
}

// Open applies equality check predicate on the "open" field. It's identical to OpenEQ.
func Open(v float32) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOpen), v))
	})
}

// Close applies equality check predicate on the "close" field. It's identical to CloseEQ.
func Close(v float32) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClose), v))
	})
}

// High applies equality check predicate on the "high" field. It's identical to HighEQ.
func High(v float32) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHigh), v))
	})
}

// Low applies equality check predicate on the "low" field. It's identical to LowEQ.
func Low(v float32) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLow), v))
	})
}

// Volume applies equality check predicate on the "volume" field. It's identical to VolumeEQ.
func Volume(v int32) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVolume), v))
	})
}

// OutstandingShare applies equality check predicate on the "outstandingShare" field. It's identical to OutstandingShareEQ.
func OutstandingShare(v int32) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOutstandingShare), v))
	})
}

// Turnover applies equality check predicate on the "turnover" field. It's identical to TurnoverEQ.
func Turnover(v float32) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTurnover), v))
	})
}

// MarketEQ applies the EQ predicate on the "market" field.
func MarketEQ(v string) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMarket), v))
	})
}

// MarketNEQ applies the NEQ predicate on the "market" field.
func MarketNEQ(v string) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMarket), v))
	})
}

// MarketIn applies the In predicate on the "market" field.
func MarketIn(vs ...string) predicate.Stock {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stock(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMarket), v...))
	})
}

// MarketNotIn applies the NotIn predicate on the "market" field.
func MarketNotIn(vs ...string) predicate.Stock {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stock(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMarket), v...))
	})
}

// MarketGT applies the GT predicate on the "market" field.
func MarketGT(v string) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMarket), v))
	})
}

// MarketGTE applies the GTE predicate on the "market" field.
func MarketGTE(v string) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMarket), v))
	})
}

// MarketLT applies the LT predicate on the "market" field.
func MarketLT(v string) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMarket), v))
	})
}

// MarketLTE applies the LTE predicate on the "market" field.
func MarketLTE(v string) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMarket), v))
	})
}

// MarketContains applies the Contains predicate on the "market" field.
func MarketContains(v string) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMarket), v))
	})
}

// MarketHasPrefix applies the HasPrefix predicate on the "market" field.
func MarketHasPrefix(v string) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMarket), v))
	})
}

// MarketHasSuffix applies the HasSuffix predicate on the "market" field.
func MarketHasSuffix(v string) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMarket), v))
	})
}

// MarketEqualFold applies the EqualFold predicate on the "market" field.
func MarketEqualFold(v string) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMarket), v))
	})
}

// MarketContainsFold applies the ContainsFold predicate on the "market" field.
func MarketContainsFold(v string) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMarket), v))
	})
}

// CodeEQ applies the EQ predicate on the "code" field.
func CodeEQ(v string) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCode), v))
	})
}

// CodeNEQ applies the NEQ predicate on the "code" field.
func CodeNEQ(v string) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCode), v))
	})
}

// CodeIn applies the In predicate on the "code" field.
func CodeIn(vs ...string) predicate.Stock {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stock(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCode), v...))
	})
}

// CodeNotIn applies the NotIn predicate on the "code" field.
func CodeNotIn(vs ...string) predicate.Stock {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stock(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCode), v...))
	})
}

// CodeGT applies the GT predicate on the "code" field.
func CodeGT(v string) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCode), v))
	})
}

// CodeGTE applies the GTE predicate on the "code" field.
func CodeGTE(v string) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCode), v))
	})
}

// CodeLT applies the LT predicate on the "code" field.
func CodeLT(v string) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCode), v))
	})
}

// CodeLTE applies the LTE predicate on the "code" field.
func CodeLTE(v string) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCode), v))
	})
}

// CodeContains applies the Contains predicate on the "code" field.
func CodeContains(v string) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCode), v))
	})
}

// CodeHasPrefix applies the HasPrefix predicate on the "code" field.
func CodeHasPrefix(v string) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCode), v))
	})
}

// CodeHasSuffix applies the HasSuffix predicate on the "code" field.
func CodeHasSuffix(v string) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCode), v))
	})
}

// CodeEqualFold applies the EqualFold predicate on the "code" field.
func CodeEqualFold(v string) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCode), v))
	})
}

// CodeContainsFold applies the ContainsFold predicate on the "code" field.
func CodeContainsFold(v string) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCode), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Stock {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stock(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Stock {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stock(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// DateEQ applies the EQ predicate on the "date" field.
func DateEQ(v time.Time) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDate), v))
	})
}

// DateNEQ applies the NEQ predicate on the "date" field.
func DateNEQ(v time.Time) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDate), v))
	})
}

// DateIn applies the In predicate on the "date" field.
func DateIn(vs ...time.Time) predicate.Stock {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stock(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDate), v...))
	})
}

// DateNotIn applies the NotIn predicate on the "date" field.
func DateNotIn(vs ...time.Time) predicate.Stock {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stock(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDate), v...))
	})
}

// DateGT applies the GT predicate on the "date" field.
func DateGT(v time.Time) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDate), v))
	})
}

// DateGTE applies the GTE predicate on the "date" field.
func DateGTE(v time.Time) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDate), v))
	})
}

// DateLT applies the LT predicate on the "date" field.
func DateLT(v time.Time) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDate), v))
	})
}

// DateLTE applies the LTE predicate on the "date" field.
func DateLTE(v time.Time) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDate), v))
	})
}

// OpenEQ applies the EQ predicate on the "open" field.
func OpenEQ(v float32) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOpen), v))
	})
}

// OpenNEQ applies the NEQ predicate on the "open" field.
func OpenNEQ(v float32) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOpen), v))
	})
}

// OpenIn applies the In predicate on the "open" field.
func OpenIn(vs ...float32) predicate.Stock {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stock(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOpen), v...))
	})
}

// OpenNotIn applies the NotIn predicate on the "open" field.
func OpenNotIn(vs ...float32) predicate.Stock {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stock(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOpen), v...))
	})
}

// OpenGT applies the GT predicate on the "open" field.
func OpenGT(v float32) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOpen), v))
	})
}

// OpenGTE applies the GTE predicate on the "open" field.
func OpenGTE(v float32) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOpen), v))
	})
}

// OpenLT applies the LT predicate on the "open" field.
func OpenLT(v float32) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOpen), v))
	})
}

// OpenLTE applies the LTE predicate on the "open" field.
func OpenLTE(v float32) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOpen), v))
	})
}

// CloseEQ applies the EQ predicate on the "close" field.
func CloseEQ(v float32) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClose), v))
	})
}

// CloseNEQ applies the NEQ predicate on the "close" field.
func CloseNEQ(v float32) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldClose), v))
	})
}

// CloseIn applies the In predicate on the "close" field.
func CloseIn(vs ...float32) predicate.Stock {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stock(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldClose), v...))
	})
}

// CloseNotIn applies the NotIn predicate on the "close" field.
func CloseNotIn(vs ...float32) predicate.Stock {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stock(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldClose), v...))
	})
}

// CloseGT applies the GT predicate on the "close" field.
func CloseGT(v float32) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldClose), v))
	})
}

// CloseGTE applies the GTE predicate on the "close" field.
func CloseGTE(v float32) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldClose), v))
	})
}

// CloseLT applies the LT predicate on the "close" field.
func CloseLT(v float32) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldClose), v))
	})
}

// CloseLTE applies the LTE predicate on the "close" field.
func CloseLTE(v float32) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldClose), v))
	})
}

// HighEQ applies the EQ predicate on the "high" field.
func HighEQ(v float32) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHigh), v))
	})
}

// HighNEQ applies the NEQ predicate on the "high" field.
func HighNEQ(v float32) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHigh), v))
	})
}

// HighIn applies the In predicate on the "high" field.
func HighIn(vs ...float32) predicate.Stock {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stock(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldHigh), v...))
	})
}

// HighNotIn applies the NotIn predicate on the "high" field.
func HighNotIn(vs ...float32) predicate.Stock {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stock(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldHigh), v...))
	})
}

// HighGT applies the GT predicate on the "high" field.
func HighGT(v float32) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHigh), v))
	})
}

// HighGTE applies the GTE predicate on the "high" field.
func HighGTE(v float32) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHigh), v))
	})
}

// HighLT applies the LT predicate on the "high" field.
func HighLT(v float32) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHigh), v))
	})
}

// HighLTE applies the LTE predicate on the "high" field.
func HighLTE(v float32) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHigh), v))
	})
}

// LowEQ applies the EQ predicate on the "low" field.
func LowEQ(v float32) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLow), v))
	})
}

// LowNEQ applies the NEQ predicate on the "low" field.
func LowNEQ(v float32) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLow), v))
	})
}

// LowIn applies the In predicate on the "low" field.
func LowIn(vs ...float32) predicate.Stock {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stock(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLow), v...))
	})
}

// LowNotIn applies the NotIn predicate on the "low" field.
func LowNotIn(vs ...float32) predicate.Stock {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stock(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLow), v...))
	})
}

// LowGT applies the GT predicate on the "low" field.
func LowGT(v float32) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLow), v))
	})
}

// LowGTE applies the GTE predicate on the "low" field.
func LowGTE(v float32) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLow), v))
	})
}

// LowLT applies the LT predicate on the "low" field.
func LowLT(v float32) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLow), v))
	})
}

// LowLTE applies the LTE predicate on the "low" field.
func LowLTE(v float32) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLow), v))
	})
}

// VolumeEQ applies the EQ predicate on the "volume" field.
func VolumeEQ(v int32) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVolume), v))
	})
}

// VolumeNEQ applies the NEQ predicate on the "volume" field.
func VolumeNEQ(v int32) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVolume), v))
	})
}

// VolumeIn applies the In predicate on the "volume" field.
func VolumeIn(vs ...int32) predicate.Stock {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stock(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldVolume), v...))
	})
}

// VolumeNotIn applies the NotIn predicate on the "volume" field.
func VolumeNotIn(vs ...int32) predicate.Stock {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stock(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldVolume), v...))
	})
}

// VolumeGT applies the GT predicate on the "volume" field.
func VolumeGT(v int32) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVolume), v))
	})
}

// VolumeGTE applies the GTE predicate on the "volume" field.
func VolumeGTE(v int32) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVolume), v))
	})
}

// VolumeLT applies the LT predicate on the "volume" field.
func VolumeLT(v int32) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVolume), v))
	})
}

// VolumeLTE applies the LTE predicate on the "volume" field.
func VolumeLTE(v int32) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVolume), v))
	})
}

// OutstandingShareEQ applies the EQ predicate on the "outstandingShare" field.
func OutstandingShareEQ(v int32) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOutstandingShare), v))
	})
}

// OutstandingShareNEQ applies the NEQ predicate on the "outstandingShare" field.
func OutstandingShareNEQ(v int32) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOutstandingShare), v))
	})
}

// OutstandingShareIn applies the In predicate on the "outstandingShare" field.
func OutstandingShareIn(vs ...int32) predicate.Stock {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stock(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOutstandingShare), v...))
	})
}

// OutstandingShareNotIn applies the NotIn predicate on the "outstandingShare" field.
func OutstandingShareNotIn(vs ...int32) predicate.Stock {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stock(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOutstandingShare), v...))
	})
}

// OutstandingShareGT applies the GT predicate on the "outstandingShare" field.
func OutstandingShareGT(v int32) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOutstandingShare), v))
	})
}

// OutstandingShareGTE applies the GTE predicate on the "outstandingShare" field.
func OutstandingShareGTE(v int32) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOutstandingShare), v))
	})
}

// OutstandingShareLT applies the LT predicate on the "outstandingShare" field.
func OutstandingShareLT(v int32) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOutstandingShare), v))
	})
}

// OutstandingShareLTE applies the LTE predicate on the "outstandingShare" field.
func OutstandingShareLTE(v int32) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOutstandingShare), v))
	})
}

// TurnoverEQ applies the EQ predicate on the "turnover" field.
func TurnoverEQ(v float32) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTurnover), v))
	})
}

// TurnoverNEQ applies the NEQ predicate on the "turnover" field.
func TurnoverNEQ(v float32) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTurnover), v))
	})
}

// TurnoverIn applies the In predicate on the "turnover" field.
func TurnoverIn(vs ...float32) predicate.Stock {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stock(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTurnover), v...))
	})
}

// TurnoverNotIn applies the NotIn predicate on the "turnover" field.
func TurnoverNotIn(vs ...float32) predicate.Stock {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stock(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTurnover), v...))
	})
}

// TurnoverGT applies the GT predicate on the "turnover" field.
func TurnoverGT(v float32) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTurnover), v))
	})
}

// TurnoverGTE applies the GTE predicate on the "turnover" field.
func TurnoverGTE(v float32) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTurnover), v))
	})
}

// TurnoverLT applies the LT predicate on the "turnover" field.
func TurnoverLT(v float32) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTurnover), v))
	})
}

// TurnoverLTE applies the LTE predicate on the "turnover" field.
func TurnoverLTE(v float32) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTurnover), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Stock) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Stock) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Stock) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		p(s.Not())
	})
}
