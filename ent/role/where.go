// Code generated by entc, DO NOT EDIT.

package role

import (
	"pandora/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Descript applies equality check predicate on the "descript" field. It's identical to DescriptEQ.
func Descript(v string) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescript), v))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int8) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// IsDeleted applies equality check predicate on the "is_deleted" field. It's identical to IsDeletedEQ.
func IsDeleted(v int8) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsDeleted), v))
	})
}

// AccessAPI applies equality check predicate on the "access_api" field. It's identical to AccessAPIEQ.
func AccessAPI(v string) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccessAPI), v))
	})
}

// AccessMethod applies equality check predicate on the "access_method" field. It's identical to AccessMethodEQ.
func AccessMethod(v string) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccessMethod), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Role {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Role(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Role {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Role(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// DescriptEQ applies the EQ predicate on the "descript" field.
func DescriptEQ(v string) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescript), v))
	})
}

// DescriptNEQ applies the NEQ predicate on the "descript" field.
func DescriptNEQ(v string) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDescript), v))
	})
}

// DescriptIn applies the In predicate on the "descript" field.
func DescriptIn(vs ...string) predicate.Role {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Role(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDescript), v...))
	})
}

// DescriptNotIn applies the NotIn predicate on the "descript" field.
func DescriptNotIn(vs ...string) predicate.Role {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Role(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDescript), v...))
	})
}

// DescriptGT applies the GT predicate on the "descript" field.
func DescriptGT(v string) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDescript), v))
	})
}

// DescriptGTE applies the GTE predicate on the "descript" field.
func DescriptGTE(v string) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDescript), v))
	})
}

// DescriptLT applies the LT predicate on the "descript" field.
func DescriptLT(v string) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDescript), v))
	})
}

// DescriptLTE applies the LTE predicate on the "descript" field.
func DescriptLTE(v string) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDescript), v))
	})
}

// DescriptContains applies the Contains predicate on the "descript" field.
func DescriptContains(v string) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDescript), v))
	})
}

// DescriptHasPrefix applies the HasPrefix predicate on the "descript" field.
func DescriptHasPrefix(v string) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDescript), v))
	})
}

// DescriptHasSuffix applies the HasSuffix predicate on the "descript" field.
func DescriptHasSuffix(v string) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDescript), v))
	})
}

// DescriptEqualFold applies the EqualFold predicate on the "descript" field.
func DescriptEqualFold(v string) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDescript), v))
	})
}

// DescriptContainsFold applies the ContainsFold predicate on the "descript" field.
func DescriptContainsFold(v string) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDescript), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int8) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int8) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int8) predicate.Role {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Role(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int8) predicate.Role {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Role(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int8) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatus), v))
	})
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int8) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatus), v))
	})
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int8) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatus), v))
	})
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int8) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatus), v))
	})
}

// IsDeletedEQ applies the EQ predicate on the "is_deleted" field.
func IsDeletedEQ(v int8) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsDeleted), v))
	})
}

// IsDeletedNEQ applies the NEQ predicate on the "is_deleted" field.
func IsDeletedNEQ(v int8) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsDeleted), v))
	})
}

// IsDeletedIn applies the In predicate on the "is_deleted" field.
func IsDeletedIn(vs ...int8) predicate.Role {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Role(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIsDeleted), v...))
	})
}

// IsDeletedNotIn applies the NotIn predicate on the "is_deleted" field.
func IsDeletedNotIn(vs ...int8) predicate.Role {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Role(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIsDeleted), v...))
	})
}

// IsDeletedGT applies the GT predicate on the "is_deleted" field.
func IsDeletedGT(v int8) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIsDeleted), v))
	})
}

// IsDeletedGTE applies the GTE predicate on the "is_deleted" field.
func IsDeletedGTE(v int8) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIsDeleted), v))
	})
}

// IsDeletedLT applies the LT predicate on the "is_deleted" field.
func IsDeletedLT(v int8) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIsDeleted), v))
	})
}

// IsDeletedLTE applies the LTE predicate on the "is_deleted" field.
func IsDeletedLTE(v int8) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIsDeleted), v))
	})
}

// AccessAPIEQ applies the EQ predicate on the "access_api" field.
func AccessAPIEQ(v string) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccessAPI), v))
	})
}

// AccessAPINEQ applies the NEQ predicate on the "access_api" field.
func AccessAPINEQ(v string) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAccessAPI), v))
	})
}

// AccessAPIIn applies the In predicate on the "access_api" field.
func AccessAPIIn(vs ...string) predicate.Role {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Role(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAccessAPI), v...))
	})
}

// AccessAPINotIn applies the NotIn predicate on the "access_api" field.
func AccessAPINotIn(vs ...string) predicate.Role {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Role(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAccessAPI), v...))
	})
}

// AccessAPIGT applies the GT predicate on the "access_api" field.
func AccessAPIGT(v string) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAccessAPI), v))
	})
}

// AccessAPIGTE applies the GTE predicate on the "access_api" field.
func AccessAPIGTE(v string) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAccessAPI), v))
	})
}

// AccessAPILT applies the LT predicate on the "access_api" field.
func AccessAPILT(v string) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAccessAPI), v))
	})
}

// AccessAPILTE applies the LTE predicate on the "access_api" field.
func AccessAPILTE(v string) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAccessAPI), v))
	})
}

// AccessAPIContains applies the Contains predicate on the "access_api" field.
func AccessAPIContains(v string) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAccessAPI), v))
	})
}

// AccessAPIHasPrefix applies the HasPrefix predicate on the "access_api" field.
func AccessAPIHasPrefix(v string) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAccessAPI), v))
	})
}

// AccessAPIHasSuffix applies the HasSuffix predicate on the "access_api" field.
func AccessAPIHasSuffix(v string) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAccessAPI), v))
	})
}

// AccessAPIEqualFold applies the EqualFold predicate on the "access_api" field.
func AccessAPIEqualFold(v string) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAccessAPI), v))
	})
}

// AccessAPIContainsFold applies the ContainsFold predicate on the "access_api" field.
func AccessAPIContainsFold(v string) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAccessAPI), v))
	})
}

// AccessMethodEQ applies the EQ predicate on the "access_method" field.
func AccessMethodEQ(v string) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccessMethod), v))
	})
}

// AccessMethodNEQ applies the NEQ predicate on the "access_method" field.
func AccessMethodNEQ(v string) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAccessMethod), v))
	})
}

// AccessMethodIn applies the In predicate on the "access_method" field.
func AccessMethodIn(vs ...string) predicate.Role {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Role(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAccessMethod), v...))
	})
}

// AccessMethodNotIn applies the NotIn predicate on the "access_method" field.
func AccessMethodNotIn(vs ...string) predicate.Role {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Role(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAccessMethod), v...))
	})
}

// AccessMethodGT applies the GT predicate on the "access_method" field.
func AccessMethodGT(v string) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAccessMethod), v))
	})
}

// AccessMethodGTE applies the GTE predicate on the "access_method" field.
func AccessMethodGTE(v string) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAccessMethod), v))
	})
}

// AccessMethodLT applies the LT predicate on the "access_method" field.
func AccessMethodLT(v string) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAccessMethod), v))
	})
}

// AccessMethodLTE applies the LTE predicate on the "access_method" field.
func AccessMethodLTE(v string) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAccessMethod), v))
	})
}

// AccessMethodContains applies the Contains predicate on the "access_method" field.
func AccessMethodContains(v string) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAccessMethod), v))
	})
}

// AccessMethodHasPrefix applies the HasPrefix predicate on the "access_method" field.
func AccessMethodHasPrefix(v string) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAccessMethod), v))
	})
}

// AccessMethodHasSuffix applies the HasSuffix predicate on the "access_method" field.
func AccessMethodHasSuffix(v string) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAccessMethod), v))
	})
}

// AccessMethodEqualFold applies the EqualFold predicate on the "access_method" field.
func AccessMethodEqualFold(v string) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAccessMethod), v))
	})
}

// AccessMethodContainsFold applies the ContainsFold predicate on the "access_method" field.
func AccessMethodContainsFold(v string) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAccessMethod), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Role {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Role(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Role {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Role(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Role {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Role(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Role {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Role(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// HasUsers applies the HasEdge predicate on the "users" edge.
func HasUsers() predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UsersTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, UsersTable, UsersPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUsersWith applies the HasEdge predicate on the "users" edge with a given conditions (other predicates).
func HasUsersWith(preds ...predicate.User) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UsersInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, UsersTable, UsersPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Role) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Role) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Role) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		p(s.Not())
	})
}
